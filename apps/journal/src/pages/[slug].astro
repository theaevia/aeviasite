---
import BaseLayout from '../layouts/BaseLayout.astro';
import Figure from '../components/Figure.astro';
import { getCollection } from 'astro:content';
import { withBase } from '../utils/withBase';
import { resolveMediaPath } from '../utils/media';

const { slug } = Astro.params;

const slugOf = (entry: any): string => {
  const ds = entry?.data?.slug;
  if (typeof ds === 'string' && ds.trim()) return ds.trim();
  if (ds && typeof ds === 'object' && typeof ds.slug === 'string' && ds.slug) return ds.slug;
  if (typeof entry?.slug === 'string' && entry.slug) return entry.slug;
  const normalizedId = String(entry?.id ?? '').replace(/\\/g, '/');
  const base = normalizedId.split('/').pop() ?? '';
  if (base.includes('.')) {
    const withoutExtension = base.split('.').slice(0, -1).join('.');
    if (withoutExtension) return withoutExtension;
  }
  return base;
};

const relationSlug = (value: any): string => {
  if (typeof value === 'string') return value.trim();
  if (value && typeof value === 'object') {
    const candidates = ['slug', 'value', 'id', '_id', 'key', 'ref', '_ref', 'path', 'filepath', 'file', 'name'];
    for (const k of candidates) {
      const v = (value as any)[k];
      if (typeof v === 'string' && v.trim()) return v.trim();
    }
  }
  return '';
};

const allPosts = await getCollection('posts', ({ data }) => data.status === 'published');
const post = allPosts.find((p) => slugOf(p) === slug);
if (!post) {
  throw Astro.redirect(withBase('/'));
}

const authorEntries = await getCollection('authors');
const authorsMap = Object.fromEntries(
  authorEntries.map((entry) => {
    const authorSlug = slugOf(entry);
    return [authorSlug, entry.data];
  })
);

const categoryEntries = await getCollection('categories');
const categoryMap = Object.fromEntries(
  categoryEntries.map((entry) => {
    const categorySlug = slugOf(entry);
    return [categorySlug, entry.data?.label ?? categorySlug];
  })
);

const title = post.data.title;
const description = post.data.dek ?? '';

const heroSrc = resolveMediaPath(post.data.hero?.src);
const heroUrl = heroSrc && heroSrc.startsWith('/') ? withBase(heroSrc) : heroSrc;
const ogCandidate = resolveMediaPath(post.data.og_image ?? post.data.hero?.src);
const ogImage =
  ogCandidate && ogCandidate.startsWith('/')
    ? new URL(withBase(ogCandidate), Astro.site).toString()
    : ogCandidate ?? undefined;

const datePublished = post.data.date;
const dateModified = post.data.updated ?? datePublished;

const authorRefs = (post.data.authors || [])
  .map((value: any) => {
    const aSlug = relationSlug(value);
    if (!aSlug) return null;
    const data = authorsMap[aSlug];
    if (!data) return null;
    const avatarSrc = resolveMediaPath(data.avatar);
    const avatarUrl = avatarSrc && avatarSrc.startsWith('/') ? withBase(avatarSrc) : avatarSrc;
    return { slug: aSlug, data, avatarUrl };
  })
  .filter(Boolean) as Array<{ slug: string; data: any; avatarUrl?: string }>;

const defaultConsultationUrl = 'https://book.squareup.com/appointments/flwwunfdy1hm72/location/L1TKSRMBS3N9H/services';
const mindConsultationUrl = 'https://book.squareup.com/appointments/sveent13urj63l/location/L1TKSRMBS3N9H/services';
const isMindCategory = (post.data.categories || []).some((value: any) => relationSlug(value) === 'mind');
const consultationUrl = isMindCategory ? mindConsultationUrl : defaultConsultationUrl;

const jsonLd = {
  '@context': 'https://schema.org',
  '@type': 'Article',
  headline: title,
  datePublished,
  dateModified,
  author: authorRefs.map(({ data: a }) => ({ '@type': 'Person', name: a.name, jobTitle: a.credentials })),
  image: ogImage,
  publisher: { '@type': 'Organization', name: 'The Aevia Group LTD' },
  mainEntityOfPage: Astro.url.href,
};

const { Content } = await post.render();
---
<BaseLayout title={title} description={description} ogImage={ogImage}>
  <script type="application/ld+json">{JSON.stringify(jsonLd)}</script>

  <article class="space-y-6">
    <!-- Hero -->
    {heroUrl && (
      <figure class="rounded-2xl overflow-hidden border border-border">
        <img
          src={heroUrl}
          alt={post.data.hero?.alt || post.data.title}
          class="w-full h-[320px] md:h-[420px] object-cover"
          loading="eager"
        />
      </figure>
    )}

    <!-- Title & Meta -->
    <header class="space-y-3">
      <div class="chip-group">
        {(post.data.categories || []).map((categoryValue) => {
          const categorySlug = relationSlug(categoryValue);
          if (!categorySlug) return null;
          return (
            <a class="chip chip--primary" href={withBase(`/category/${categorySlug}`)}>
              {categoryMap[categorySlug] || categorySlug}
            </a>
          );
        })}
      </div>

      <h1 class="text-4xl md:text-5xl font-serif font-bold leading-tight">{title}</h1>
      {description && <p class="text-lg text-foreground/70">{description}</p>}

      <div class="flex items-center gap-4 text-sm text-foreground/70 flex-wrap">
        {authorRefs.map(({ slug: aSlug, data: author, avatarUrl }) => (
          <a class="inline-flex items-center gap-2 hover:text-foreground" href={withBase(`/author/${aSlug}`)}>
            {avatarUrl && (
              <img
                src={avatarUrl}
                alt={author.name}
                width="28"
                height="28"
                class="w-7 h-7 rounded-full object-cover aspect-square"
                loading="lazy"
              />
            )}
            <span>{author.name}{author.credentials ? `, ${author.credentials}` : ''}</span>
          </a>
        ))}
        <span>·</span>
        <time datetime={datePublished}>{new Date(datePublished as any).toLocaleDateString('en-GB')}</time>
        {post.data.reading_time && (
          <>
            <span>·</span>
            <span>{post.data.reading_time} min read</span>
          </>
        )}
      </div>
    </header>

    <!-- Article content -->
    <section class="prose max-w-none">
      <Content components={{ Figure }} />
    </section>

    {post.data.tags?.length ? (
      <div class="chip-group pt-2">
        {post.data.tags.map((t) => <span class="chip">#{t}</span>)}
      </div>
    ) : null}

    {post.data.disclaimer && (
      <aside class="text-sm text-foreground/70 border-l-4 border-primary/60 pl-4">
        <strong>Disclaimer:</strong> {post.data.disclaimer}
      </aside>
    )}
  </article>

  <!-- CTA -->
  <div class="mt-12 rounded-2xl border border-border bg-secondary p-6 md:p-8">
    <div class="md:flex md:items-center md:justify-between gap-6">
      <div>
        <h3 class="text-2xl font-serif font-semibold">Prefer tailored guidance?</h3>
        <p class="text-foreground/70 mt-1">Book a medical consultation to discuss your goals and the safest path forward.</p>
      </div>
      <div class="mt-4 md:mt-0">
        <a class="inline-flex rounded-full bg-primary px-5 py-2.5 text-white hover:bg-primary/90 smooth-transition" href={consultationUrl} rel="noopener" target="_blank">
          Book a consultation
        </a>
      </div>
    </div>
  </div>
</BaseLayout>

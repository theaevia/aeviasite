---
import BaseLayout from '../layouts/BaseLayout.astro';
import Figure from '../components/Figure.astro';
import { getCollection } from 'astro:content';
import { withBase } from '../utils/withBase';
import { mainSiteUrl } from '../utils/mainSiteUrl';
import { resolveMediaPath } from '../utils/media';

const { slug } = Astro.params;

// helper to normalise any entry's slug
const getEntrySlug = (entry: any): string => {
  const s = typeof entry.slug === 'string' ? entry.slug : entry?.slug?.slug;
  if (s) return String(s);
  const normalizedId = String(entry.id ?? '').replace(/\\/g, '/');
  return normalizedId.split('/').pop()?.split('.').slice(0, -1).join('.') ?? '';
};

const getDataEntrySlug = (entry: any): string => {
  const rawId = typeof entry.id === 'string' ? entry.id : String(entry.id ?? '');
  const normalized = rawId.replace(/\\/g, '/');
  const lastSegment = normalized.split('/').pop() ?? '';
  return lastSegment.replace(/\.[^.]+$/, '');
};

const allPosts = await getCollection('posts', ({ data }) => data.status === 'published');
const post = allPosts.find((p) => getEntrySlug(p) === slug);
if (!post) {
  // soft 404 or redirect home
  throw Astro.redirect(withBase('/'));
}

const authorEntries = await getCollection('authors');
const authorsMap = Object.fromEntries(
  authorEntries
    .map((entry) => ({ slug: getDataEntrySlug(entry), data: entry.data }))
    .filter((entry) => entry.slug && entry.data)
    .map((entry) => [entry.slug, entry.data])
);

const categoryEntries = await getCollection('categories');
const categoryMap = Object.fromEntries(
  categoryEntries
    .map((entry) => ({ slug: getDataEntrySlug(entry), data: entry.data }))
    .filter((entry) => entry.slug && entry.data?.label)
    .map((entry) => [entry.slug, entry.data.label])
);

const title = post.data.title;
const description = post.data.dek ?? '';

const heroSrc = resolveMediaPath(post.data.hero?.src);
const heroUrl = heroSrc && heroSrc.startsWith('/') ? withBase(heroSrc) : heroSrc;
const ogCandidate = resolveMediaPath(post.data.og_image ?? post.data.hero?.src);
const ogImage =
  ogCandidate && ogCandidate.startsWith('/')
    ? new URL(withBase(ogCandidate), Astro.site).toString()
    : ogCandidate ?? undefined;

const datePublished = post.data.date;
const dateModified = post.data.updated ?? datePublished;

const authorRefs = (post.data.authors || [])
  .map((aSlug: string) => {
    const data = authorsMap[aSlug];
    if (!data) return null;
    const avatarSrc = resolveMediaPath(data.avatar);
    const avatarUrl = avatarSrc && avatarSrc.startsWith('/') ? withBase(avatarSrc) : avatarSrc;
    return { slug: aSlug, data, avatarUrl };
  })
  .filter(Boolean) as Array<{ slug: string; data: any; avatarUrl?: string }>;

const jsonLd = {
  '@context': 'https://schema.org',
  '@type': 'Article',
  headline: title,
  datePublished,
  dateModified,
  author: authorRefs.map(({ data: a }) => ({ '@type': 'Person', name: a.name, jobTitle: a.credentials })),
  image: ogImage,
  publisher: { '@type': 'Organization', name: 'The Aevia Group LTD' },
  mainEntityOfPage: Astro.url.href,
};

const { Content } = await post.render();
---

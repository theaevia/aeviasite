---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';
import { withBase } from '../../utils/withBase';
import { resolveMediaPath } from '../../utils/media';

const { slug } = Astro.params;

const slugOf = (entry: any): string => {
  const ds = entry?.data?.slug;
  if (typeof ds === 'string' && ds.trim()) return ds.trim();
  if (ds && typeof ds === 'object' && typeof ds.slug === 'string' && ds.slug) return ds.slug;
  if (typeof entry?.slug === 'string' && entry.slug) return entry.slug;
  const normalizedId = String(entry?.id ?? '').replace(/\\/g, '/');
  const base = normalizedId.split('/').pop() ?? '';
  if (base.includes('.')) {
    const withoutExtension = base.split('.').slice(0, -1).join('.');
    if (withoutExtension) return withoutExtension;
  }
  return base;
};

const relationSlug = (value: any): string => {
  if (typeof value === 'string') return value.trim();
  if (value && typeof value === 'object') {
    const candidates = ['slug', 'value', 'id', '_id', 'key', 'ref', '_ref', 'path', 'filepath', 'file', 'name'];
    for (const k of candidates) {
      const v = (value as any)[k];
      if (typeof v === 'string' && v.trim()) return v.trim();
    }
  }
  return '';
};

const categories = await getCollection('categories');
const category = categories.find((entry) => slugOf(entry) === slug);

if (!category) {
  throw Astro.redirect(withBase('/'));
}

const posts = (await getCollection('posts', ({ data }) => data.status === 'published'))
  .filter((p) => Array.isArray(p.data.categories) && p.data.categories
    .some((value: any) => relationSlug(value) === String(slug)))
  .sort((a, b) => (a.data.date < b.data.date ? 1 : -1));
---
<BaseLayout title={category.data.label} description={category.data.description}>
  <main class="space-y-8">
    <h1 class="text-3xl md:text-4xl font-serif font-bold">{category.data.label}</h1>

    <div class="grid gap-8 md:grid-cols-2">
      {posts.map((p) => {
        const entrySlug = slugOf(p);
        const heroSrc = resolveMediaPath(p.data.hero?.src);
        const heroUrl = heroSrc && heroSrc.startsWith('/') ? withBase(heroSrc) : heroSrc;

        return (
          <article class="card p-6">
            <a href={withBase(`/${entrySlug}`)} class="block">
              {heroUrl && (
                <div class="card-bleed">
                  <img
                    src={heroUrl}
                    alt={p.data.hero?.alt || p.data.title}
                    loading="lazy"
                    class="w-full h-56 object-cover"
                  />
                </div>
              )}
              <h2 class="text-2xl font-serif font-semibold">{p.data.title}</h2>
              {p.data.dek && <p class="mt-2 text-foreground/80">{p.data.dek}</p>}
              <small class="block mt-3 text-sm text-foreground/60">
                {new Date(p.data.date as any).toLocaleDateString('en-GB')}
              </small>
            </a>
          </article>
        );
      })}
    </div>
  </main>
</BaseLayout>

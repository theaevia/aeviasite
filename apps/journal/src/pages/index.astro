---
import BaseLayout from '../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';
import { withBase } from '../utils/withBase';
import { resolveMediaPath } from '../utils/media';

const slugOf = (entry: any): string => {
  const ds = entry?.data?.slug;
  if (typeof ds === 'string' && ds.trim()) return ds.trim();
  if (ds && typeof ds === 'object' && typeof ds.slug === 'string' && ds.slug) return ds.slug;
  if (typeof entry?.slug === 'string' && entry.slug) return entry.slug;
  const normalizedId = String(entry?.id ?? '').replace(/\\/g, '/');
  const base = normalizedId.split('/').pop() ?? '';
  if (base.includes('.')) {
    const withoutExtension = base.split('.').slice(0, -1).join('.');
    if (withoutExtension) return withoutExtension;
  }
  return base;
};

const relationSlug = (value: any): string => {
  if (typeof value === 'string') return value.trim();
  if (value && typeof value === 'object') {
    const candidates = ['slug', 'value', 'id', '_id', 'key', 'ref', '_ref', 'path', 'filepath', 'file', 'name'];
    for (const k of candidates) {
      const v = (value as any)[k];
      if (typeof v === 'string' && v.trim()) return v.trim();
    }
  }
  return '';
};

const posts = (await getCollection('posts', ({ data }) => data.status === 'published'))
  .sort((a, b) => (a.data.date < b.data.date ? 1 : -1));

const categories = await getCollection('categories');
const categoryMap = Object.fromEntries(categories.map((entry) => {
  const entrySlug = slugOf(entry);
  return [entrySlug, entry.data?.label ?? entrySlug];
}));
---

<BaseLayout title="The Aevia Journal" description="Evidence-based aesthetics, longevity & mindset.">
  <main class="space-y-10">
    <header class="space-y-4">
      <div class="flex">
        <a
          class="inline-flex items-center gap-2 text-xs uppercase tracking-[0.3em] text-foreground hover:text-primary/80"
          href={withBase('/')}
        >
          The Aevia Journal
        </a>
      </div>
      <h1 class="text-4xl md:text-5xl font-serif font-bold">Doctor-led insights on skin, longevity, and performance.</h1>

      <!-- Category pills -->
      <div class="chip-group mt-2">
        <!-- This page itself (root of the journal app). In prod it becomes /journal/ -->
        <a class="chip" href={withBase('/')}>All</a>

        {categories.map((entry) => {
          const categorySlug = slugOf(entry);
          return (
            <a class="chip" href={withBase(`/category/${categorySlug}`)}>{entry.data?.label ?? categorySlug}</a>
          );
        })}
      </div>
    </header>

    <div class="grid gap-8 md:grid-cols-2">
      {posts.map((p) => {
        const slug = slugOf(p);
        const heroSrc = resolveMediaPath(p.data.hero?.src);
        const heroUrl = heroSrc && heroSrc.startsWith('/')
          ? withBase(heroSrc)
          : heroSrc;

        return (
          <article class="card p-6">
            <!-- Post detail lives at /{slug} inside the journal app -->
            <a class="block" href={withBase(`/${slug}`)}>
              {heroUrl && (
                <div class="card-bleed">
                  <img
                    class="w-full h-56 md:h-56 object-cover"
                    src={heroUrl}
                    alt={p.data.hero?.alt || p.data.title}
                    loading="lazy"
                  />
                </div>
              )}

              <div class="chip-group mb-2">
                {(p.data.categories || [])
                  .slice(0, 2)
                  .map((value) => {
                    const slug = relationSlug(value);
                    if (!slug) return null;
                    return <span class="chip chip--primary">{categoryMap[slug] || slug}</span>;
                  })}
              </div>

              <h2 class="text-2xl font-serif font-semibold text-foreground">{p.data.title}</h2>
              {p.data.dek && <p class="mt-2 text-foreground/80">{p.data.dek}</p>}

              <div class="mt-4 flex items-center justify-between text-sm text-foreground/60">
                <span>{new Date(p.data.date as any).toLocaleDateString('en-GB')}</span>
                {p.data.reading_time && <span>{p.data.reading_time} min</span>}
              </div>
            </a>
          </article>
        );
      })}
    </div>
  </main>
</BaseLayout>
